//
// XConf Admin Configuration File
// =============================
//
// This configuration file contains all the settings required to run the XConf Admin server.
// The XConf Admin server is a configuration management system for RDK devices.
//
// Configuration sections:
// - Application metadata and build information
// - Server settings (port, timeouts, metrics)
// - Logging configuration
// - Authentication and authorization (SAT, IDP)
// - External service connections
// - Database connection settings
// - Distributed tracing configuration
//
// Environment Variables:
// The following environment variables should be set before starting the server:
// - SAT_CLIENT_ID: Client ID for SAT authentication
// - SAT_CLIENT_SECRET: Client secret for SAT authentication  
// - SECURITY_TOKEN_KEY: Security token key for JWT validation
//
// Usage:
// bin/xconfadmin-linux-amd64 -f /path/to/xconfadmin.conf
//

xconfwebconfig {
    
    // =============================
    // APPLICATION METADATA
    // =============================
    // Build and version information - automatically populated during build process
    // These values are used for version tracking and diagnostics
    
    code_git_commit = "2ac7ff4"                    // Git commit hash of the source code
    build_time = "Thu Feb 14 01:57:26 2019 UTC"    // Timestamp when the application was built
    token_api_enabled = true                       // Enable/disable token-based API authentication
    ProjectName = "xconfadmin"                     // Project identifier
    ProjectVersion = "3.6.6-SNAPSHOT"             // Current version of the application
    ServiceName = "N/A"                           // Service name (set during deployment)
    ServiceVersion = "N/A"                        // Service version (set during deployment)
    Source = "N/A"                               // Source identifier
    Rev = "N/A"                                  // Revision number
    GitBranch = "develop"                        // Git branch used for build
    GitBuildTime = "6/2/2021 4:16 PM"          // Git build timestamp
    GitCommitId = "18f6608a1a8135d719336d09d05c296d4f5e655b"  // Full Git commit ID
    GitCommitTime = "Tue May 18 16:26:18 2021 +0000"          // Git commit timestamp

    // =============================
    // DISTRIBUTED TRACING
    // =============================
    // Configuration for distributed tracing and observability
    // Supports OpenTelemetry (OTEL) for request tracing across services
    
    tracing {
        moracide_tag_prefix = "X-Cl-Experiment"    // Prefix for experiment tags in headers
        
        otel {
            enabled = false                        // Enable/disable OpenTelemetry tracing
            endpoint = "127.0.0.1:4318"          // OTEL collector endpoint (HTTP)
            operation_name = "http.request"       // Default operation name for traces
            // Allowed values: noop, stdout, http
            // - noop: No tracing output
            // - stdout: Print traces to console (development)
            // - http: Send traces to OTEL collector endpoint (production)
            provider = "http"                     // Tracing provider type
        }
    }

    // =============================
    // SERVER CONFIGURATION
    // =============================
    // HTTP server settings including port, timeouts, and feature toggles
    
    server {
        port = 9001                              // HTTP server port (default: 9001)
        read_timeout_in_secs = 5                 // Maximum time to read request (seconds)
        write_timeout_in_secs = 50               // Maximum time to write response (seconds)
        metrics_enabled = true                   // Enable Prometheus metrics endpoint (/metrics)
    }

    // =============================
    // LOGGING CONFIGURATION
    // =============================
    // Structured logging settings for application observability
    
    log {
        level = "debug"                          // Log level: debug, info, warn, error, fatal
        file = ""                               // Log file path (empty = stdout)
        format = "json"                         // Log format: json, text
        set_report_caller = true                // Include file/line info in logs
    }

    // =============================
    // SAT (Security Access Token) CONFIGURATION
    // =============================
    // Settings for SAT-based authentication and token management
    // SAT tokens are used for service-to-service authentication
    
    sat {
        SAT_REFRESH_FREQUENCY_IN_HOUR = 6       // How often to refresh SAT tokens (hours)
        SAT_REFRESH_BUFFER_IN_MINS = 15         // Buffer time before token expiry (minutes)
        client_id = ""                          // SAT client ID (set via SAT_CLIENT_ID env var)
        client_secret = ""                      // SAT client secret (set via SAT_CLIENT_SECRET env var)
        SAT_ON = false                          // Enable/disable SAT authentication
    }

    // =============================
    // IDP (Identity Provider) SERVICE
    // =============================
    // Configuration for external Identity Provider integration
    // Used for user authentication and authorization flows
    
    idp_service {
        host = "https://idp_service.com"         // Base URL of the Identity Provider service
        client_id = ""                          // OAuth2 client ID for IDP authentication
        client_secret = ""                      // OAuth2 client secret for IDP authentication
        idp_login_path = "/idp/login"           // Login endpoint path
        idp_logout_path = "/idp/logout"         // Logout endpoint path
        idp_code_path = "/idp/code"             // Authorization code endpoint path
        idp_continue_path = "/idp/url"          // Continue/redirect URL path
        idp_logout_after_path= "/idp/logout/after"  // Post-logout redirect path
        idp_full_login_path = ""                // Full login URL (auto-constructed if empty)
        idp_full_logout_path = ""               // Full logout URL (auto-constructed if empty)
    }

    // =============================
    // EXTERNAL SERVICE CONFIGURATIONS
    // =============================
    // HTTP client settings for external service integrations
    // Common pattern: retries, timeouts, connection pooling

    // SAT Service - Security Access Token service for authentication
    sat_service {
        retries = 3                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 4             // Connection timeout (seconds)
        read_timeout_in_secs = 141              // Read timeout (seconds)
        max_idle_conns = 0                      // Max idle connections (0 = unlimited)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://sat_service.net"        // SAT service base URL
    }
    
    // SAT Consumer - Token validation service
    sat_consumer {
        consumer_host = "https://sat_service_validation.net"  // Token validation endpoint
        verify_stage_host = true                              // Verify SSL certificates
    }

    // Device Service - Device information and management
    device_service {
        retries = 0                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2             // Connection timeout (seconds)
        read_timeout_in_secs = 142              // Read timeout (seconds)
        max_idle_conns = 0                      // Max idle connections (0 = unlimited)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://device_service_testing.net"  // Device service base URL
    }

    // Account Service - User account management and validation
    account_service {
        retries = 0                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2             // Connection timeout (seconds)
        read_timeout_in_secs = 142              // Read timeout (seconds)
        max_idle_conns = 0                      // Max idle connections (0 = unlimited)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://account_service_testing.net"  // Account service base URL
    }

    // Tagging Service - Device and configuration tagging management
    tagging_service {
        retries = 0                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2             // Connection timeout (seconds)
        read_timeout_in_secs = 142              // Read timeout (seconds)
        max_idle_conns = 0                      // Max idle connections (0 = unlimited)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://tagging_service_testing.net/DataService"  // Tagging service URL with path
    }

    // Group Service - Device grouping and management
    group_service {
        retries = 0                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2             // Connection timeout (seconds)
        read_timeout_in_secs = 142              // Read timeout (seconds)
        max_idle_conns = 0                      // Max idle connections (0 = unlimited)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://group_service_testing.net"  // Group service base URL
    }

    // Group Sync Service - Group synchronization between systems
    group_sync_service {
        retries = 0                             // Number of retry attempts on failure
        retry_in_msecs = 100                    // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2             // Connection timeout (seconds)
        read_timeout_in_secs = 30               // Read timeout (seconds)
        max_idle_conns_per_host = 100           // Max idle connections per host
        keepalive_timeout_in_secs = 30          // TCP keepalive timeout (seconds)
        host = "https://group_service_testing.net"  // Group sync service base URL
        path = "/group"                         // API path for group operations
        security_token_path = "/secure"         // Security token validation path
    }

    // =============================
    // XCONF CORE CONFIGURATION
    // =============================
    // Main application settings for XConf functionality
    // Controls feature toggles, service integrations, and business logic
    
    xconf {
        // Service Integration Toggles
        enable_tagging_service = true           // Enable device tagging service integration
        enable_tagging_service_rfc = true       // Enable RFC (Remote Feature Control) tagging
        enable_tagging_service_admin = false    // Enable admin tagging API service
        enable_canary_service = true            // Enable canary deployment service
        enable_idp_service = true               // Enable Identity Provider service
        idp_service_name = idp_service          // Reference to IDP service configuration
        
        // Canary Deployment Settings
        enable_canary_creation = false          // Enable canary creation for broadband devices
        enable_video_canary_creation = true     // Enable canary creation for video devices
        enable_recook_service = false           // Enable configuration recook service
        
        // Service Name References (must match service configuration sections above)
        sat_service_name = sat_service                  // SAT service reference
        account_service_name = account_service          // Account service reference
        device_service_name = device_service            // Device service reference
        tagging_service_name = tagging_service          // Tagging service reference
        group_service_name= group_service               // Group service reference
        group_sync_service_name = group_sync_service    // Group sync service reference
        
        // Canary Deployment Timing Configuration
        canary_time_zone = "America/New_York"           // Primary timezone for canary operations
        canary_start_time = "09:00"                     // Daily canary start time (HH:MM)
        canary_end_time = "17:00"                       // Daily canary end time (HH:MM)
        canary_time_format = "15:04"                    // Time format (24-hour)
        canary_default_partner = "comcast"              // Default partner for canary deployments
        canary_timezone_list = "America/New_York,America/Detroit,America/Toronto"  // Supported timezones
        canary_size = 10000                             // Default canary group size
        canary_distribution_percentage = 10             // Canary distribution percentage
        canary_firmware_upgrade_start_time = 1800       // Firmware upgrade start (seconds since midnight)
        canary_firmware_upgrade_end_time = 2700         // Firmware upgrade end (seconds since midnight)
        canary_percent_filter_name = ""                 // Percentage filter name for canary
        canary_appsettings_partner_list = "partnerslist" // App settings partner list
        canary_video_model_list = ""                    // Video device model list for canary
        
        // Response Configuration
        return_account_id = true                        // Include account ID in responses
        return_account_hash = true                      // Include account hash in responses
        enable_fw_download_logs = false                 // Enable firmware download logging
        estb_recovery_firmware_versions = ".* .*"       // Regex for recovery firmware versions
        
        // Service Toggles
        dataservice_enabled = true                      // Enable data service API
        adminservice_enabled = true                     // Enable admin service API
        
        // Cache Configuration
        cache_tickDuration = 60000                      // Cache tick duration (milliseconds)
        cache_retryCountUntilFullRefresh = 10           // Retry count before full cache refresh
        cache_changedKeysTimeWindowSize = 900000        // Changed keys time window (milliseconds)
        cache_reloadCacheEntries = false                // Enable cache entry reloading
        cache_reloadCacheEntriesTimeout = 1             // Cache reload timeout
        cache_reloadCacheEntriesTimeUnit = "DAYS"       // Cache reload timeout unit
        cache_numberOfEntriesToProcessSequentially = 10000  // Sequential processing limit
        cache_keysetChunkSizeForMassCacheLoad = 500     // Chunk size for mass cache loading
        cache_update_window_size = 60000                // Cache update window (milliseconds)
        cache_clone_data_enabled = false                // Enable cache data cloning
        
        // Feature Configuration
        ipaddr_shorthand_parsing_enabled = true         // Enable IP address shorthand parsing
        evaluator_nslist_loading_cache_enabled = false  // Enable evaluator namespace cache
        allowedNumberOfFeatures = 100                   // Maximum number of features allowed
        
        // Authentication Configuration
        authProfilesActive = "dev"                      // Active authentication profile
        authProfilesDefault = "prod"                    // Default authentication profile
        ipMacIsConditionLimit = 20                      // IP/MAC condition limit for rules
        security_token_key = ""                         // Security token key (set via SECURITY_TOKEN_KEY env var)
        authprovider = "acl"                           // Authentication provider type
        application_types = "stb"                       // Supported application types (comma-separated)
    }

    // =============================
    // HTTP CLIENT CONFIGURATION
    // =============================
    // SSL/TLS certificate configuration for HTTPS clients
    
    http_client {
        ca_comodo_cert_file= ""                     // CA certificate file path (PEM format)
        cert_file = ""                              // Client certificate file path (PEM format)
        private_key_file = ""                       // Private key file path (PEM format)
    }
    
    // =============================
    // CANARY MANAGER SERVICE
    // =============================
    // Configuration for Canary Manager service integration
    
    canarymgr {
        retries = 0                                 // Number of retry attempts on failure
        retry_in_msecs = 100                        // Delay between retries (milliseconds)
        connect_timeout_in_secs = 2                 // Connection timeout (seconds)
        read_timeout_in_secs = 142                  // Read timeout (seconds)
        max_idle_conns_per_host = 100               // Max idle connections per host
        keepalive_timeout_in_secs = 30              // TCP keepalive timeout (seconds)
        host = "https://canarymgr_testing.net"      // Canary manager service base URL
    }

    // =============================
    // XCRP (XConf Configuration Rollback Platform)
    // =============================
    // Configuration for XCRP service integration and RFC module locking
    
     xcrp {
        retries = 5                                 // Number of retries for calling XCRP service
        retry_in_msecs = 30000                      // Retry interval in milliseconds
        connect_timeout_in_secs = 180               // Connection timeout (seconds)
        read_timeout_in_secs = 142                  // Read timeout (seconds)
        max_idle_conns_per_host = 100               // Max idle connections per host
        keepalive_timeout_in_secs = 30              // TCP keepalive timeout (seconds)
        lock_duration_in_secs = 300                 // RFC module lock duration in UI (seconds)
        canarymgr_host =  ["https://canarymgr-west_testing.net", "https://canarymgr-east_testing.net"]  // Canary manager hosts (multi-region)
    }

    // =============================
    // DATABASE CONFIGURATION
    // =============================
    // Cassandra database connection settings
    // Used for storing device configurations, rules, and metadata
    
    database {
        hosts = [                                   // Cassandra cluster hosts
            "127.0.0.1"                            // Primary Cassandra host (add more for cluster)
        ]
        keyspace = "ApplicationsDiscoveryDataService"   // Primary keyspace name
        test_keyspace = "test_appds"                // Test keyspace for unit/integration tests
        protocolversion = 4                         // Cassandra protocol version (3 or 4)
        is_ssl_enabled = false                      // Enable SSL/TLS for database connections
        timeout_in_sec = 5                          // Query timeout (seconds)
        connect_timeout_in_sec = 5                  // Connection timeout (seconds)
        concurrent_queries = 5                      // Maximum concurrent queries per connection
        connections = 5                             // Number of connections per host
        local_dc = ""                              // Local datacenter name (for multi-DC clusters)
        user = "cassandra"                         // Database username
        password = "cassandra"                     // Database password (use encrypted_password for production)
        encrypted_password = ""                    // Encrypted database password (preferred for production)
    }
}
